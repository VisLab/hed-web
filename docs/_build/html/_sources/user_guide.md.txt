# HED Web Tools ‚Äî User Guide

## Overview

HED Web Tools is a comprehensive web-based application for working with HED (Hierarchical Event Descriptors) data. This guide provides complete instructions for setting up, configuring, and deploying the application in various environments.

```{note}
This guide covers both development and production setups. Choose the section that matches your use case.
```

## Table of Contents

```{contents}
:local:
:depth: 2
```

## Quick Start Options

Choose the setup method that best fits your needs:

### üöÄ Local Development Setup
**Best for:** Trying out the application, contributing to development, or testing

**Time required:** ~5 minutes

**Prerequisites:** Python 3.10+, Git

### üê≥ Production Docker Deployment  
**Best for:** Production servers with Docker support

**Time required:** ~10 minutes

**Prerequisites:** Ubuntu Server, Docker, sudo access

### üìö Documentation Development
**Best for:** Contributing to documentation or building docs locally

**Time required:** ~3 minutes

**Prerequisites:** Python 3.10+

---

## Local Development Setup

### Prerequisites

Ensure you have the following installed:

- **Python 3.10 or higher** ‚Äî [Download Python](https://www.python.org/downloads/)
- **Git** ‚Äî [Download Git](https://git-scm.com/downloads/)
- **Command line access** (Terminal, Command Prompt, or PowerShell)

```{tip}
On Windows, we recommend using PowerShell or the Windows Terminal for better command line experience.
```

### Installation Steps

#### 1. Clone the Repository

```bash
git clone https://github.com/hed-standard/hed-web
cd hed-web
```

#### 2. Create Virtual Environment

Using a virtual environment isolates dependencies and prevents conflicts:

```bash
# Create virtual environment
python -m venv .venv
```

#### 3. Activate Virtual Environment

**Windows (PowerShell/Command Prompt):**
```batch
.venv\Scripts\activate
```

**macOS/Linux:**
```bash
source .venv/bin/activate
```

```{note}
You'll need to activate the virtual environment every time you work on the project in a new terminal session.
```

#### 4. Install Dependencies

```bash
pip install -r requirements.txt
```

#### 5. Create Configuration File

**Windows:**
```batch
copy config_template.py config.py
```

**macOS/Linux:**
```bash
cp config_template.py config.py
```

#### 6. Run the Application

```bash
hedweb --host 127.0.0.1 --port 5000 --debug
```

#### 7. Access the Application

Open your browser and navigate to: **http://127.0.0.1:5000**

```{note}
üéâ Success! The HED Web Tools application is now running locally.
```

### Development Workflow

Once you have the application running:

1. **Make changes** to the code
2. **Restart the server** (Ctrl+C, then run `hedweb` again)
3. **Refresh your browser** to see changes
4. **Run tests** before committing (see Testing section)

---

## Documentation Development

### Setting Up Documentation Environment

#### 1. Install Documentation Dependencies

```bash
pip install sphinx furo myst-parser
```

#### 2. Build Documentation

```bash
cd docs
sphinx-build -b html . _build/html
```

#### 3. Serve Documentation Locally

```bash
# Install live server (optional)
pip install sphinx-autobuild

# Serve with auto-reload
sphinx-autobuild . _build/html --open-browser
```

The documentation will be available at **http://localhost:8000** and will automatically rebuild when you make changes.

### Documentation Structure

```
docs/
‚îú‚îÄ‚îÄ conf.py              # Sphinx configuration
‚îú‚îÄ‚îÄ index.rst            # Main documentation index
‚îú‚îÄ‚îÄ introduction.md      # Introduction to HED
‚îú‚îÄ‚îÄ user_guide.md        # This file
‚îî‚îÄ‚îÄ api/                 # API documentation
    ‚îú‚îÄ‚îÄ index.md
    ‚îú‚îÄ‚îÄ architecture.md
    ‚îî‚îÄ‚îÄ ...
```

---

## Production Deployment

### Docker Deployment (Recommended)

This method uses Docker for containerization and is suitable for most production environments.

#### Prerequisites

- **Ubuntu Server** (18.04 or newer recommended)
- **Docker and Docker Compose** installed
- **Sudo access**
- **Domain name** (optional but recommended)

#### Quick Production Setup

```bash
# Create deployment directory
mkdir -p ~/deploy_hed
cd ~/deploy_hed

# Download deployment script
curl -fsSL -o deploy.sh https://raw.githubusercontent.com/hed-standard/hed-web/main/deploy/deploy.sh

# Make script executable
chmod +x deploy.sh

# Run deployment (replace with your domain or IP)
sudo ./deploy.sh main prod your-domain.com
```

#### Manual Docker Setup

If you prefer manual setup or need customization:

1. **Clone and prepare:**
```bash
git clone https://github.com/hed-standard/hed-web
cd hed-web/deploy
```

2. **Configure environment:**
```bash
cp base_config.py config.py
# Edit config.py as needed
```

3. **Build and run:**
```bash
docker build -t hedweb .
docker run -d -p 33000:80 --name hedweb-container hedweb
```

The application will be available on port 33000.

---

## Reverse Proxy Setup

For production deployments, you'll typically want to use a reverse proxy like Nginx or Apache.

### Nginx Configuration

Create `/etc/nginx/sites-available/hedweb`:

```nginx
server {
    listen 80;
    server_name your-domain.com;

    location / {
        proxy_pass http://localhost:33000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle large file uploads
        client_max_body_size 100M;
    }
}
```

Enable the site:
```bash
sudo ln -s /etc/nginx/sites-available/hedweb /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx
```

### SSL/TLS Setup with Certbot

```bash
# Install Certbot
sudo apt install certbot python3-certbot-nginx

# Get SSL certificate
sudo certbot --nginx -d your-domain.com

# Verify auto-renewal
sudo certbot renew --dry-run
```

---

## Configuration Reference

### Environment Variables

The application can be configured using environment variables:

| Variable | Description | Default | Example |
|----------|-------------|---------|---------|
| `HED_WEB_HOST` | Server host | `127.0.0.1` | `0.0.0.0` |
| `HED_WEB_PORT` | Server port | `5000` | `8080` |
| `HED_WEB_DEBUG` | Debug mode | `False` | `True` |
| `HED_WEB_SECRET_KEY` | Flask secret key | Generated | `your-secret-key` |

### Configuration File Options

Edit `config.py` to customize:

```python
# Basic settings
HOST = '127.0.0.1'
PORT = 5000
DEBUG = True

# Security
SECRET_KEY = 'your-secret-key-here'
WTF_CSRF_ENABLED = True

# Upload settings
MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size

# HED schema settings
HED_CACHE_FOLDER = '/tmp/hed_cache'
DEFAULT_HED_VERSION = '8.2.0'
```

---

## Testing

### Running Tests

#### Unit Tests
```bash
python -m unittest discover -s tests/ -p 'test_*.py'
```

#### Service Tests
```bash
python -m unittest discover -s services_tests/ -p 'test_*.py'
```

```{note}
You must have a running instance of the application to run service tests.
```

#### Run All Tests
```bash
python -m unittest discover
```

#### Test with Coverage
```bash
pip install coverage
python -m coverage run --source=hedweb -m unittest discover
python -m coverage report
python -m coverage html
```

The coverage HTML report will be available in `htmlcov/index.html`.

### Test Structure

```
tests/                  # Unit tests
‚îú‚îÄ‚îÄ test_*.py
‚îî‚îÄ‚îÄ data/              # Test data files

services_tests/        # Integration tests
‚îú‚îÄ‚îÄ test_services_*.py
‚îî‚îÄ‚îÄ data/              # Test data files
```

---

## Troubleshooting

### Common Issues

#### Issue: ModuleNotFoundError
**Symptoms:** `ModuleNotFoundError: No module named 'hedweb'`

**Solution:**
1. Ensure virtual environment is activated
2. Install requirements: `pip install -r requirements.txt`
3. Check Python version: `python --version` (should be 3.10+)

#### Issue: Port Already in Use
**Symptoms:** `Address already in use` error

**Solution:**
1. Use a different port: `hedweb --port 5001`
2. Or kill existing process:
   ```bash
   # Find process using port 5000
   netstat -tulpn | grep :5000
   # Kill process by PID
   kill -9 <PID>
   ```

#### Issue: Permission Denied (Linux/macOS)
**Symptoms:** Permission errors when running commands

**Solution:**
1. Check file permissions: `ls -la`
2. Make scripts executable: `chmod +x script_name.sh`
3. Use `sudo` only when necessary

#### Issue: Docker Container Won't Start
**Symptoms:** Container exits immediately or fails to start

**Solution:**
1. Check logs: `docker logs hedweb-container`
2. Verify port availability: `netstat -tulpn | grep :33000`
3. Check configuration files
4. Ensure Docker daemon is running

### Getting Debug Information

#### Application Logs
```bash
# Enable debug mode
export HED_WEB_DEBUG=True
hedweb --debug
```

#### System Information
```bash
# Python version
python --version

# Installed packages
pip list

# System info (Linux/macOS)
uname -a

# System info (Windows)
systeminfo
```

### Performance Optimization

#### For Development
- Use `--debug` flag for auto-reload
- Disable unnecessary features in config
- Use local HED schemas when possible

#### For Production
- Set `DEBUG = False` in config
- Use production WSGI server (gunicorn)
- Enable caching
- Use reverse proxy (Nginx/Apache)
- Monitor resource usage

---

## Getting Help

### Documentation Resources

- **API Documentation:** [API Reference](api/index.md)
- **HED Standard:** [https://www.hedtags.org/](https://www.hedtags.org/)
- **GitHub Repository:** [https://github.com/hed-standard/hed-web](https://github.com/hed-standard/hed-web)

### Community Support

- **GitHub Issues:** Report bugs or request features
- **Discussions:** Ask questions in GitHub Discussions
- **Email:** Contact the HED team for enterprise support

### Contributing

We welcome contributions! Please see:
- `CONTRIBUTING.md` for development guidelines
- `CODE_OF_CONDUCT.md` for community guidelines
- Open issues for areas needing help


---

## Appendix

### Command Reference

#### Development Commands
```bash
# Start development server
hedweb --host 127.0.0.1 --port 5000 --debug

# Run tests
python -m unittest discover -s tests/ -p 'test_*.py'

# Build documentation
sphinx-build -b html docs docs/_build/html

# Install in development mode
pip install -e .
```

#### Production Commands
```bash
# Build Docker image
docker build -t hedweb .

# Run Docker container
docker run -d -p 33000:80 hedweb

# Check container status
docker ps

# View container logs
docker logs hedweb-container
```

### File Structure Overview

```
hed-web/
‚îú‚îÄ‚îÄ hedweb/                    # Main application package
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ app_factory.py        # Flask application factory
‚îÇ   ‚îú‚îÄ‚îÄ routes.py             # Web routes
‚îÇ   ‚îî‚îÄ‚îÄ ...                   # Other modules
‚îú‚îÄ‚îÄ docs/                     # Documentation
‚îú‚îÄ‚îÄ tests/                    # Unit tests
‚îú‚îÄ‚îÄ services_tests/           # Integration tests
‚îú‚îÄ‚îÄ deploy/                   # Deployment files
‚îú‚îÄ‚îÄ requirements.txt          # Python dependencies
‚îú‚îÄ‚îÄ config_template.py        # Configuration template
‚îî‚îÄ‚îÄ setup.py                  # Package setup
```
