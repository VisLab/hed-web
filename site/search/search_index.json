{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HED Web Tools","text":"\ud83e\udde0 Hierarchical Event Descriptor Web Interface <p>Powerful web-based tools for processing and validating HED annotations</p>"},{"location":"#what-is-hed-web","title":"What is HED Web?","text":"<p>HED Web Tools provides an intuitive web-based interface for working with Hierarchical Event Descriptor (HED) data. Whether you're a researcher annotating experimental data or a developer integrating HED processing into your workflow, our tools make HED operations accessible and efficient.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The HED web tools are available online at hedtools.org/hed or can be deployed locally for your own use.</p>"},{"location":"#online-access","title":"Online Access","text":"<ul> <li>Production: https://hedtools.org/hed - Stable version for general use</li> <li>Development: https://hedtools.org/hed_dev - Latest features and experimental tools</li> </ul>"},{"location":"#local-installation","title":"Local Installation","text":"<p>For local deployment, see the User Guide for detailed installation instructions.</p>"},{"location":"#core-capabilities","title":"Core Capabilities","text":"<p>Data Validation: Validate HED annotations in event files, sidecars, spreadsheets, and strings against HED schemas.</p> <p>Format Conversion: Convert between different HED formats (long/short forms) and file types.</p> <p>Data Processing: Search HED annotations, assemble complex annotations, and execute remodeling operations.</p> <p>Schema Management: Work with different HED schema versions and compare schemas.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Introduction - Learn about HED and the web tools</li> <li>User Guide - Installation and usage instructions  </li> <li>API Reference - Technical documentation for developers</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation: hed-resources.org</li> <li>GitHub: github.com/hed-standard/hed-web</li> <li>Issues: Report bugs and request features on GitHub</li> </ul>"},{"location":"introduction/","title":"Introduction to HED web tools","text":""},{"location":"introduction/#what-is-hed","title":"What is HED?","text":"<p>HED (Hierarchical Event Descriptor) is a system for describing events in machine-actionable form. HED tags are comma-separated path strings that describe what happened, when it happened, and other relevant properties of experimental events.</p> <p>For example, a HED annotation might look like: <pre><code>Sensory-event, Visual-presentation, (Image, Face)\n</code></pre></p>"},{"location":"introduction/#hed-web-tools-overview","title":"HED web tools overview","text":"<p>HED Web Tools provides a web-based interface for working with HED annotations and schemas. The application is built using Flask and offers both a user-friendly web interface and REST API endpoints for programmatic access.</p>"},{"location":"introduction/#web-interface","title":"Web interface","text":"<ul> <li>Form-based operations: Easy-to-use forms for common HED tasks.</li> <li>File upload support: Handle various file formats (TSV, CSV, Excel, JSON).</li> <li>Real-time validation: Immediate feedback on HED annotation validity.</li> <li>Download results: Get processed files and validation reports.</li> </ul> <p>The web interface provides an intuitive way to interact with HED data. The interface is deployed through a Docker container and two versions are available:  hed and hed_dev.</p> <p>The hed version https://hedtools.org/hed relies on the released version of the python HedTools on PyPi and the released version of the hed-web tools.</p> <p>The hed_dev version https://hedtools.org/hed_dev is based on the latest version of the HedTools on GitHub and a hed-web version on a specified branch.</p>"},{"location":"introduction/#rest-api","title":"REST API","text":"<ul> <li>Service endpoints: Programmatic access to all HED operations.</li> <li>JSON communication: Standard REST API with JSON request/response.  </li> <li>Batch processing: Handle multiple files and operations efficiently.</li> <li>Integration ready: Easy to integrate with other tools and workflows.</li> </ul> <p>The REST API provides programmatic access to all HED operations. An example of the use the REST API can be found in the  hed-matlab repository.</p>"},{"location":"introduction/#supported-operations","title":"Supported operations","text":""},{"location":"introduction/#processing-tables","title":"Processing tables","text":"<ul> <li>File validation: Validate HED annotations in event and other tabular files.</li> <li>Remodeling: Transform or summarize tabular files  using remodeling operations.</li> <li>Assembly: Combine sidecar and event data into complete annotations.</li> <li>Search: Find rows of a tabular file matching specific HED criteria.</li> <li>Extraction: Extract a JSON template for HED annotations based on a tabular file.</li> </ul>"},{"location":"introduction/#sidecar-operations","title":"Sidecar Operations","text":"<ul> <li>Validation: Ensure sidecar files meet HED requirements.</li> <li>Extraction: Extract a spreadsheet from a JSON file for easier annotation.</li> <li>Merging: Merge a spreadsheet into an existing JSON file.  </li> </ul> <p>JSON files (called sidecars) contain HED annotations for BIDS datasets.  </p>"},{"location":"introduction/#schema-operations","title":"Schema Operations","text":"<ul> <li>Validation: Check HED schema files for compliance.</li> <li>Conversion: Convert between different schema formats (XML, MediaWiki, or TSV Folder).</li> <li>Comparison: Compare different schema versions.</li> <li>Information: Extract metadata and statistics from schemas.</li> </ul> <p>HED schemas define the structure and vocabularies for HED annotations.  </p>"},{"location":"introduction/#string-operations","title":"String Operations","text":"<ul> <li>Validation: Validate individual HED annotation strings.</li> <li>Assembly: Combine HED strings with proper syntax.</li> <li>Conversion: Convert between different HED string formats.</li> <li>Search: Find specific tags or patterns in HED strings.</li> </ul> <p>HED strings are individual annotations that can be validated and processed. The string operations are useful for quick checks.  </p>"},{"location":"introduction/#spreadsheet-processing","title":"Spreadsheet Processing","text":"<ul> <li>Column mapping: Map spreadsheet columns to HED concepts.</li> <li>Validation: Validate HED data in spreadsheet format.</li> <li>Conversion: Convert between spreadsheet and other formats.</li> </ul> <p>Spreadsheets provide a convenient way to manage HED annotations in tabular format. </p>"},{"location":"user_guide/","title":"User Guide for HED Web Tools","text":""},{"location":"user_guide/#running-locally","title":"Running locally","text":"<p>This project contains the web interface code for deploying HED tools as a web application running in a docker module.   </p>"},{"location":"user_guide/#clone-the-repository","title":"Clone the repository","text":"<p>To run the web application locally, you will need to clone the <code>hed-web</code> repository. <pre><code>git clone https://github.com/hed-standard/hed-web\n</code></pre></p>"},{"location":"user_guide/#setup-configuration","title":"Setup configuration","text":"<p>You must have a <code>config.py</code> file in the root directory of your repository:</p> <ol> <li>Copy <code>config_template.py</code> to <code>config.py</code></li> <li>Change <code>BASE_DIRECTORY</code> in the <code>Config</code> class in <code>config.py</code> to point to the directory that        you want the application to use to temporarily store uploads and to cache the        HED schema.</li> </ol>"},{"location":"user_guide/#virtual-environments","title":"Virtual environments","text":"<p>It is recommended to use a virtual environment to avoid conflicts with other Python packages.</p>"},{"location":"user_guide/#using-venv-recommended","title":"Using venv (recommended)","text":"<ol> <li> <p>Create a virtual environment:    <pre><code>python -m venv .venv\n</code></pre></p> </li> <li> <p>Activate the virtual environment:</p> </li> <li>On Windows:      <pre><code>.venv\\Scripts\\activate\n</code></pre></li> <li> <p>On macOS/Linux:      <pre><code>source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install the required dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> </ol>"},{"location":"user_guide/#using-conda-alternative","title":"Using conda (alternative)","text":"<ol> <li> <p>Create a conda environment:    <pre><code>conda create -n .venv python=3.10\n</code></pre></p> </li> <li> <p>Activate the environment:    <pre><code>conda activate .venv\n</code></pre></p> </li> <li> <p>Install the required dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> </ol>"},{"location":"user_guide/#running-the-application","title":"Running the application","text":"<p>Once this installation is complete, you can execute <code>runserver</code>. This call should bring up a Flask test server. Paste the indicated link into a web browser, and you are ready to go.</p>"},{"location":"user_guide/#deployment-on-an-external-webserver","title":"Deployment on an external webserver","text":""},{"location":"user_guide/#overview","title":"Overview","text":"<p>The <code>deploy_hed</code> directory contains scripts and configuration files that are needed to deploy the application as a docker container. These instructions assume that you have a Linux server with apache2 and docker installed.  </p> <p>The current setup assumes that an apache web server runs inside a docker container using internal port 80. The docker container listens to requests on port 33000 from the local host IP (assumed to be 127.0.0.1) of the Linux server running the docker container. Docker forwards these requests and subsequent responses to and from its internal server running on port 80.</p> <p>If you are on the Linux server, you can run the online tools directly in a web  browser using the address http://127.0.0.1:33000/hed. In a production environment, the tools are meant to be run through an Apache web server with proxies. The description of how to set this up is described elsewhere.</p>"},{"location":"user_guide/#deploying-the-docker-module","title":"Deploying the docker module","text":"<p>The instructions assume that you are in your home directory on the Linux server. The deployment will use your home directory as a temporary staging area. The instructions assume that you have DOCKER installed.</p> <ol> <li>Make a deployment directory, say <code>deploy_hed</code>.</li> <li>Download the hed-web deployment script to your <code>deploy_hed</code> directory.</li> <li>Change to the <code>deploy_hed</code> directory:</li> </ol> <p><pre><code>   cd ~/deploy_hed\n</code></pre> 4. Execute the <code>deploy.sh</code> script:</p> <pre><code>   sudo bash deploy.sh [branch] [environment]\n</code></pre> <p>Command line options: - <code>branch</code> (optional): Specifies which git branch to deploy from. Defaults to <code>main</code> if not specified. - <code>environment</code> (optional): Deployment environment, either <code>prod</code> or <code>dev</code>. Defaults to <code>prod</code> if not specified.</p> <p>The <code>prod</code> environment deploys to <code>/hed</code> and uses the <code>hedtools</code> container, while the <code>dev</code> environment deploys to <code>/hed_dev</code> and uses the <code>hedtools_dev</code> container.</p> <p>Examples: - Deploy production environment from main branch (default):   <pre><code>sudo bash deploy.sh\n</code></pre> - Deploy development environment:   <pre><code>sudo bash deploy.sh main dev\n</code></pre> - Deploy from a specific branch:   <pre><code>sudo bash deploy.sh develop prod\n</code></pre> - Deploy development environment from develop branch:   <pre><code>sudo bash deploy.sh develop dev\n</code></pre></p> <p>Environment differences:</p> Item Production Development Port 33000 33004 URL Prefix <code>/hed</code> <code>/hed_dev</code> HED package source PyPI hedtools package Main branch hedtools package Container name <code>hedtools</code> <code>hedtools_dev</code>"},{"location":"user_guide/#branches-and-versions","title":"Branches and versions","text":"<p>The web tools are built on the <code>hedtools</code> package housed in the <code>hed-python</code> GitHub repository. The tools are related to the <code>hed-specification</code> and <code>hed-schemas</code> repositories. The branches correspond as follows:</p> Branch Meaning Synchronized with stable Tagged as a released version - will not change. <code>stable@hed-python</code><code>stable@hed-specification</code><code>stable@hed-examples</code> master Most recent usable version.https://hedtools/edu/hed. <code>master@hed-python</code><code>master@hed-specification</code><code>main@hed-examples</code> develop Experimental and evolving.https://hedtools/edu/hed_dev. <code>develop@hed-python</code><code>develop@hed-specification</code><code>develop@hed-examples</code> <p>More information about using the webtools can be found at https://www.hed-resources.org.</p>"},{"location":"user_guide/#building-the-docs-locally","title":"Building the docs locally","text":"<p>To build and view the documentation locally:</p> <p><pre><code># Install mkdocs and the required plugins:\npip install -r docs/requirements.txt\n\n\nmkdocs build\n\n# For live development with auto-reload:\nmkdocs serve\n</code></pre> The documentation will be available at http://localhost:8000 when using mkdocs serve.</p>"},{"location":"api/","title":"API Reference Overview","text":"<p>The HED Web Tools API provides a comprehensive set of modules for processing Hierarchical Event Descriptor (HED) data through web interfaces and programmatic access. The API is designed around a service-oriented architecture with clear separation of concerns.</p>"},{"location":"api/#architecture-overview","title":"Architecture Overview","text":"graph TD     A[Web Interface] --&gt; C{Flask Routes}     B[Client] --&gt; D[REST API] --&gt; C      C --&gt; E[StringOperations]     C --&gt; F[EventOperations]     C --&gt; G[SchemaOperations]     C --&gt; H[SidecarOperations]     C --&gt; I[SpreadsheetOperations]"},{"location":"api/#module-structure","title":"Module Structure","text":""},{"location":"api/#1-application-layer","title":"1. Application Layer","text":"<ul> <li>App Factory - Flask application configuration and initialization</li> <li>Routes - Web interface endpoints and HTTP request handling</li> </ul>"},{"location":"api/#2-service-layer","title":"2. Service Layer","text":"<ul> <li>Process Service - Core orchestration and business logic</li> <li>Process Form - Form data extraction and validation</li> <li>Base Operations - Common base classes and shared functionality</li> </ul>"},{"location":"api/#3-operation-modules","title":"3. Operation Modules","text":"<ul> <li>Event Operations - Process event files with HED annotations</li> <li>Schema Operations - Validate and manipulate HED schemas</li> <li>Sidecar Operations - Handle BIDS sidecar JSON files</li> <li>Spreadsheet Operations - Process tabular data with HED columns</li> <li>String Operations - Validate and manipulate HED strings</li> </ul>"},{"location":"api/#4-utility-modules","title":"4. Utility Modules","text":"<ul> <li>Columns - Column mapping and data structure utilities</li> <li>Web Utils - Common web application helper functions</li> </ul>"},{"location":"api/#service-categories","title":"Service Categories","text":""},{"location":"api/#hed-schema-services","title":"HED Schema Services","text":"<p>Handle HED schema files and validation: - Schema validation and compliance checking - Format conversion (XML \u2194 MediaWiki) - Schema comparison and analysis - Version management</p>"},{"location":"api/#hed-string-services","title":"HED String Services","text":"<p>Process individual HED annotation strings: - String validation against schemas - String assembly and combination - Format conversion and normalization - Search and pattern matching</p>"},{"location":"api/#event-processing-services","title":"Event Processing Services","text":"<p>Work with event files containing HED annotations: - Event file validation - HED assembly (combining sidecars with events) - Event search and filtering - Remodeling operations</p>"},{"location":"api/#sidecar-services","title":"Sidecar Services","text":"<p>Handle BIDS sidecar JSON files: - Sidecar validation - HED extraction and processing - Merging multiple sidecars - BIDS compliance checking</p>"},{"location":"api/#spreadsheet-services","title":"Spreadsheet Services","text":"<p>Process tabular data with HED information: - Column mapping to HED concepts - Batch validation of HED data - Format conversion (Excel, CSV, TSV) - Data transformation and export</p>"},{"location":"api/#api-endpoints","title":"API Endpoints","text":"<p>All services are accessible via REST API endpoints under <code>/services/</code>:</p> Endpoint Purpose Operations <code>/services/strings</code> HED string operations validate, assemble, convert <code>/services/events</code> Event file processing validate, assemble, search, remodel <code>/services/schemas</code> Schema operations validate, convert, compare <code>/services/sidecars</code> Sidecar file operations validate, extract, merge <code>/services/spreadsheets</code> Spreadsheet processing validate, convert, transform"},{"location":"api/#requestresponse-format","title":"Request/Response Format","text":""},{"location":"api/#standard-request-format","title":"Standard Request Format","text":"<pre><code>{\n    \"service\": \"service_name\",\n    \"schema_version\": \"8.3.0\",\n    \"check_for_warnings\": true,\n    // Service-specific parameters...\n}\n</code></pre>"},{"location":"api/#standard-response-format","title":"Standard Response Format","text":"<pre><code>{\n    \"error_type\": \"success\",\n    \"error_msg\": \"\",\n    \"results\": {\n        \"data\": \"...\",\n        \"output_display_name\": \"result.txt\",\n        \"schema_version\": \"8.3.0\",\n        // Service-specific results...\n    }\n}\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The API uses consistent error reporting across all services:</p> <ul> <li>success - Operation completed successfully</li> <li>warning - Operation completed with non-critical issues</li> <li>error - Operation failed due to validation or processing errors</li> </ul> <p>Error messages include detailed information about what went wrong and how to fix it.</p>"},{"location":"api/#file-upload-support","title":"File Upload Support","text":"<p>Most services support file uploads for batch processing:</p>"},{"location":"api/#supported-formats","title":"Supported Formats","text":"<ul> <li>Event files: TSV, CSV, Excel (.xlsx, .xls)</li> <li>Schema files: XML, MediaWiki (.mediawiki)</li> <li>Sidecar files: JSON</li> <li>Spreadsheets: Excel, CSV, TSV</li> </ul>"},{"location":"api/#file-processing","title":"File Processing","text":"<ul> <li>Automatic format detection</li> <li>Validation before processing</li> <li>Detailed error reporting with line numbers</li> <li>Result download in original or converted formats</li> </ul>"},{"location":"api/#common-parameters","title":"Common Parameters","text":"<p>Many services share common parameters:</p> <ul> <li>schema_version - HED schema version to use for validation</li> <li>check_for_warnings - Include non-critical validation warnings</li> <li>expand_defs - Expand definition tags in output</li> <li>include_description_tags - Include description metadata</li> </ul>"},{"location":"api/#getting-started","title":"Getting Started","text":"<ol> <li>Choose your service based on the type of HED data you're processing</li> <li>Check the specific module documentation for detailed parameter information</li> <li>Use the web interface for interactive processing</li> <li>Access REST endpoints for programmatic integration</li> </ol>"},{"location":"api/#integration-examples","title":"Integration Examples","text":""},{"location":"api/#python-integration","title":"Python Integration","text":"<pre><code>import requests\n\nresponse = requests.post('http://localhost:5000/services/strings', json={\n    \"service\": \"strings_validate\",\n    \"schema_version\": \"8.3.0\", \n    \"hed_strings\": [\"Sensory-event, Visual-presentation\"]\n})\n</code></pre>"},{"location":"api/#matlab-integration","title":"MATLAB Integration","text":"<p>See the web services examples in the hed-matlab GitHub repository for detailed examples of calling these services from MATLAB.</p>"},{"location":"api/#web-interface","title":"Web Interface","text":"<p>Navigate to the appropriate section (Strings, Events, etc.) and use the form-based interface  for interactive processing.</p> <p>For detailed information about each module's functions, classes, and parameters,  see the individual module documentation pages.</p>"},{"location":"api/api_usage/","title":"API Endpoints","text":"<p>All services are accessible via REST API endpoints under <code>/services/</code>:</p> Endpoint Purpose Operations <code>/services/strings</code> HED string operations validate, assemble, convert <code>/services/events</code> Event file processing validate, assemble, search, remodel <code>/services/schemas</code> Schema operations validate, convert, compare <code>/services/sidecars</code> Sidecar file operations validate, extract, merge <code>/services/spreadsheets</code> Spreadsheet processing validate, convert, transform"},{"location":"api/api_usage/#requestresponse-format","title":"Request/Response Format","text":""},{"location":"api/api_usage/#standard-request-format","title":"Standard Request Format","text":"<pre><code>{\n    \"service\": \"service_name\",\n    \"schema_version\": \"8.3.0\",\n    \"check_for_warnings\": true,\n    // Service-specific parameters...\n}\n</code></pre>"},{"location":"api/api_usage/#standard-response-format","title":"Standard Response Format","text":"<pre><code>{\n    \"error_type\": \"success\",\n    \"error_msg\": \"\",\n    \"results\": {\n        \"data\": \"...\",\n        \"output_display_name\": \"result.txt\",\n        \"schema_version\": \"8.3.0\",\n        // Service-specific results...\n    }\n}\n</code></pre>"},{"location":"api/api_usage/#error-handling","title":"Error Handling","text":"<p>The API uses consistent error reporting across all services:</p> <ul> <li>success - Operation completed successfully</li> <li>warning - Operation completed with non-critical issues</li> <li>error - Operation failed due to validation or processing errors</li> </ul> <p>Error messages include detailed information about what went wrong and how to fix it.</p>"},{"location":"api/api_usage/#file-upload-support","title":"File Upload Support","text":"<p>Most services support file uploads for batch processing:</p>"},{"location":"api/api_usage/#supported-formats","title":"Supported Formats","text":"<ul> <li>Event files: TSV, CSV, Excel (.xlsx, .xls)</li> <li>Schema files: XML, MediaWiki (.mediawiki)</li> <li>Sidecar files: JSON</li> <li>Spreadsheets: Excel, CSV, TSV</li> </ul>"},{"location":"api/api_usage/#file-processing","title":"File Processing","text":"<ul> <li>Automatic format detection</li> <li>Validation before processing</li> <li>Detailed error reporting with line numbers</li> <li>Result download in original or converted formats</li> </ul>"},{"location":"api/api_usage/#common-parameters","title":"Common Parameters","text":"<p>Many services share common parameters:</p> <ul> <li>schema_version - HED schema version to use for validation</li> <li>check_for_warnings - Include non-critical validation warnings</li> <li>expand_defs - Expand definition tags in output</li> <li>include_description_tags - Include description metadata</li> </ul>"},{"location":"api/app_factory/","title":"App Factory","text":"<p>This module contains the Flask application factory and configuration setup.</p>"},{"location":"api/app_factory/#hedweb.app_factory","title":"app_factory","text":"<p>This module contains the factory for creating the HEDTools application.</p>"},{"location":"api/app_factory/#hedweb.app_factory.AppFactory","title":"AppFactory","text":"<p>A factory for creating the HEDTools application.</p> <p>This factory is used to create a Flask application with the given configuration. It also sets up CSRF protection for the application.</p>"},{"location":"api/app_factory/#hedweb.app_factory.AppFactory.create_app","title":"create_app  <code>staticmethod</code>","text":"<pre><code>create_app(config_class) -&gt; Flask\n</code></pre> <p>Creates the Flask app and registers the blueprints.</p> <p>Parameters:</p> Name Type Description Default <code>config_class</code> <code>class</code> <p>A class containing the configuration variables.</p> required <p>Returns:</p> Name Type Description <code>Flask</code> <code>Flask</code> <p>The initialized Flask app.</p>"},{"location":"api/app_factory/#hedweb.app_factory.AppFactory.get_static_url_path","title":"get_static_url_path  <code>staticmethod</code>","text":"<pre><code>get_static_url_path(config_class) -&gt; str\n</code></pre> <p>Gets the static URL path from the config class.</p> <p>Parameters:</p> Name Type Description Default <code>config_class</code> <code>class</code> <p>A class containing the configuration variables.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The static URL path.</p>"},{"location":"api/architecture/","title":"Architecture Overview","text":"<pre><code>graph TD\n    A[Web Interface] --&gt; C{Flask Routes}\n    B[Client] --&gt; D[REST API] --&gt; C\n\n    C --&gt; E[StringOperations]\n    C --&gt; F[EventOperations]\n    C --&gt; G[SchemaOperations]\n    C --&gt; H[SidecarOperations]\n    C --&gt; I[SpreadsheetOperations]</code></pre> <p>The HED Web Tools API is designed around a service-oriented architecture with clear separation of concerns.</p>"},{"location":"api/architecture/#module-structure","title":"Module Structure","text":""},{"location":"api/architecture/#1-application-layer","title":"1. Application Layer","text":"<ul> <li>App Factory - Flask application configuration and initialization</li> <li>Routes - Web interface endpoints and HTTP request handling</li> </ul>"},{"location":"api/architecture/#2-service-layer","title":"2. Service Layer","text":"<ul> <li>Process Service - Core orchestration and business logic</li> <li>Process Form - Form data extraction and validation</li> <li>Base Operations - Common base classes and shared functionality</li> </ul>"},{"location":"api/architecture/#3-operation-modules","title":"3. Operation Modules","text":"<ul> <li>Event Operations - Process event files with HED annotations</li> <li>Schema Operations - Validate and manipulate HED schemas</li> <li>Sidecar Operations - Handle BIDS sidecar JSON files</li> <li>Spreadsheet Operations - Process tabular data with HED columns</li> <li>String Operations - Validate and manipulate HED strings</li> </ul>"},{"location":"api/architecture/#4-utility-modules","title":"4. Utility Modules","text":"<ul> <li>Columns - Column mapping and data structure utilities</li> <li>Web Utils - Common web application helper functions</li> </ul>"},{"location":"api/base_operations/","title":"Base Operations","text":"<p>This module contains base classes and common operations for HED web services.</p>"},{"location":"api/base_operations/#hedweb.base_operations","title":"base_operations","text":""},{"location":"api/base_operations/#hedweb.base_operations.BaseOperations","title":"BaseOperations","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"api/base_operations/#hedweb.base_operations.BaseOperations.set_input_from_dict","title":"set_input_from_dict","text":"<pre><code>set_input_from_dict(input_dict)\n</code></pre> <p>Sets the child class attributes based on input_dict.     Only sets attributes that exist.</p> <p>Parameters:</p> Name Type Description Default <code>input_dict</code> <code>dict</code> <p>A dict object containing user data from a JSON service request.</p> required"},{"location":"api/base_operations/#hedweb.base_operations.BaseOperations.process","title":"process  <code>abstractmethod</code>","text":"<pre><code>process() -&gt; dict\n</code></pre> <p>Perform the requested string processing action.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The results in standard format.</p>"},{"location":"api/columns/","title":"Columns","text":"<p>This module handles column mapping and data structure utilities for HED processing.</p>"},{"location":"api/columns/#hedweb.columns","title":"columns","text":"<p>Extracts column information from a file and provides utilities for working with columns in a web form.</p>"},{"location":"api/columns/#hedweb.columns.create_column_selections","title":"create_column_selections","text":"<pre><code>create_column_selections(\n    form_dict,\n) -&gt; tuple[list[str], list[str]]\n</code></pre> <p>Return a tag prefix dictionary from a form dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>form_dict</code> <code>dict</code> <p>The column prefix table returned from a form.</p> required <p>Returns:</p> Type Description <code>tuple[list[str], list[str]]</code> <p>tuple[list[str], list[str]]:  list of value columns and a list of skipped columns.</p>"},{"location":"api/columns/#hedweb.columns.get_tag_columns","title":"get_tag_columns","text":"<pre><code>get_tag_columns(form_dict) -&gt; list[str]\n</code></pre> <p>Return the tag column names selected from a form.</p> <p>Parameters:</p> Name Type Description Default <code>form_dict</code> <code>dict</code> <p>The column names table.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of tag columns</p>"},{"location":"api/columns/#hedweb.columns.dataframe_from_worksheet","title":"dataframe_from_worksheet","text":"<pre><code>dataframe_from_worksheet(\n    worksheet, has_column_names\n) -&gt; DataFrame\n</code></pre> <p>Return a pandas data frame from an Excel worksheet.</p> <p>Parameters:</p> Name Type Description Default <code>worksheet</code> <code>Worksheet</code> <p>A single worksheet of an Excel file.</p> required <code>has_column_names</code> <code>bool</code> <p>If True, interpret the first row as column names.</p> required <p>Returns:</p> Name Type Description <code>DataFrame</code> <code>DataFrame</code> <p>The data represented in the worksheet.</p>"},{"location":"api/columns/#hedweb.columns.get_columns_request","title":"get_columns_request","text":"<pre><code>get_columns_request(request) -&gt; dict\n</code></pre> <p>Create a columns info dictionary based on the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The Request object from which to extract the information.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The dictionary with the column names.</p> <p>Raises:</p> Type Description <code>HedFileError</code> <p>If the file is missing or has a bad extension.</p>"},{"location":"api/columns/#hedweb.columns.get_column_numbers","title":"get_column_numbers","text":"<pre><code>get_column_numbers(form_dict) -&gt; list\n</code></pre> <p>Return a tag prefix dictionary from a form dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>form_dict</code> <code>dict</code> <p>The dictionary returned from a form that contains a column table.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of selected columns.</p> <p>Note: The form counts columns starting from 1.</p>"},{"location":"api/event_operations/","title":"Event Operations","text":"<p>This module handles event file processing, validation, and HED annotation operations.</p>"},{"location":"api/event_operations/#hedweb.event_operations","title":"event_operations","text":"<p>Performs operations on tabular data files using metadata from relevant sidecars if available.</p>"},{"location":"api/event_operations/#hedweb.event_operations.EventOperations","title":"EventOperations","text":"<p>               Bases: <code>BaseOperations</code></p> <p>Class to perform operations on events files.</p>"},{"location":"api/event_operations/#hedweb.event_operations.EventOperations.process","title":"process","text":"<pre><code>process() -&gt; dict\n</code></pre> <p>Perform the requested action for the events file and its sidecar.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in the standard results format.</p> <p>Raises:</p> Type Description <code>HedFileError</code> <p>If the schema was not valid.</p> <code>HedFileError</code> <p>If the command was not found or the input arguments were not valid.</p>"},{"location":"api/event_operations/#hedweb.event_operations.EventOperations.assemble","title":"assemble","text":"<pre><code>assemble() -&gt; dict\n</code></pre> <p>Create a tabular file with the original positions in first column and a HED column.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in standard format including either the assembled events string or errors.</p> Notes <p>options include columns_included and expand_defs.</p>"},{"location":"api/event_operations/#hedweb.event_operations.EventOperations.check_quality","title":"check_quality","text":"<pre><code>check_quality() -&gt; dict\n</code></pre> <p>Check the quality of the HED annotations for an events file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in standard format including either the assembled events string or errors.</p> The options for this are <ul> <li>limit_errors (bool):  If True, report at most 2 errors of each type</li> <li>show_details (bool): If True, a detailed breakdown of the event annotation is displayed with error.</li> </ul>"},{"location":"api/event_operations/#hedweb.event_operations.EventOperations.generate_sidecar","title":"generate_sidecar","text":"<pre><code>generate_sidecar() -&gt; dict\n</code></pre> <p>Generate a JSON sidecar template from a BIDS-style events file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in standard format including either the generated sidecar string or errors.</p> <p>Notes: Options are the columns selected. If None, all columns are used.</p>"},{"location":"api/event_operations/#hedweb.event_operations.EventOperations.get_hed_objs","title":"get_hed_objs","text":"<pre><code>get_hed_objs() -&gt; tuple[list, DefinitionDict]\n</code></pre> <p>Return the assembled objects and applicable definitions.</p> <p>Returns:</p> Type Description <code>tuple[list, DefinitionDict]</code> <p>tuple[list, DefinitionDict]: A tuple containing a list of HED objects and a DefinitionDict of definitions.</p>"},{"location":"api/event_operations/#hedweb.event_operations.EventOperations.remodel","title":"remodel","text":"<pre><code>remodel() -&gt; dict\n</code></pre> <p>Remodel a given events file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary pointing to results or errors.</p> <p>Raises:</p> Type Description <code>HedFileError</code> <p>If the remodeling operations were not valid.</p> The options for this are <ul> <li>include_summaries (bool):  If true and summaries exist, package event file and summaries in a zip file.</li> </ul>"},{"location":"api/event_operations/#hedweb.event_operations.EventOperations.search","title":"search","text":"<pre><code>search() -&gt; dict\n</code></pre> <p>Create a three-column tsv file with event number, matched string, and assembled strings for matched events.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary pointing to results or errors.</p> The options for this are <p>columns_included (list):  A list of column names of columns to include. expand_defs (bool): If True, expand the definitions in the assembled HED. Otherwise, shrink definitions.</p>"},{"location":"api/event_operations/#hedweb.event_operations.EventOperations.validate","title":"validate","text":"<pre><code>validate() -&gt; dict\n</code></pre> <p>Validate the events tabular input object and return the results.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing results of validation in standard format.</p> The dictionary of options includes the following. <ul> <li>check_for_warnings (bool): If true, validation should include warnings. (default False)</li> </ul>"},{"location":"api/getting_started/","title":"Getting Started Guide","text":""},{"location":"api/getting_started/#quick-start","title":"Quick Start","text":"<ol> <li>Choose your service based on the type of HED data you're processing</li> <li>Check the specific module documentation for detailed parameter information</li> <li>Use the web interface for interactive processing</li> <li>Access REST endpoints for programmatic integration</li> </ol>"},{"location":"api/getting_started/#integration-examples","title":"Integration Examples","text":""},{"location":"api/getting_started/#python-integration","title":"Python Integration","text":"<pre><code>import requests\n\nresponse = requests.post('http://localhost:5000/services/strings', json={\n    \"service\": \"strings_validate\",\n    \"schema_version\": \"8.3.0\", \n    \"hed_strings\": [\"Sensory-event, Visual-presentation\"]\n})\n</code></pre>"},{"location":"api/getting_started/#matlab-integration","title":"MATLAB Integration","text":"<p>See the web services examples in the hed-matlab GitHub repository for detailed examples of calling these services from MATLAB.</p>"},{"location":"api/getting_started/#web-interface","title":"Web Interface","text":"<p>Navigate to the appropriate section (Strings, Events, etc.) and use the form-based interface  for interactive processing.</p> <p>For detailed information about each module's functions, classes, and parameters,  see the individual module documentation pages.</p>"},{"location":"api/process_form/","title":"Process Form","text":"<p>This module handles processing of web form posts in a standardized way, extracting and validating form data for HED operations.</p>"},{"location":"api/process_form/#hedweb.process_form","title":"process_form","text":"<p>Handles processing of web form posts in a standardized way.</p>"},{"location":"api/process_form/#hedweb.process_form.ProcessForm","title":"ProcessForm","text":""},{"location":"api/process_form/#hedweb.process_form.ProcessForm.get_input_from_form","title":"get_input_from_form  <code>staticmethod</code>","text":"<pre><code>get_input_from_form(request) -&gt; dict\n</code></pre> <p>Get a dictionary of input from a service request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>A Request object containing user data for the service request.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing input arguments for calling the service request.</p>"},{"location":"api/process_form/#hedweb.process_form.ProcessForm.set_input_objects","title":"set_input_objects  <code>staticmethod</code>","text":"<pre><code>set_input_objects(arguments, request)\n</code></pre> <p>Extract and set input objects from the request form data.</p> <p>This method processes uploaded files and form data to create appropriate input objects (TabularInput, HedString, SpreadsheetInput) and adds them to the arguments dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>Dictionary to store the extracted input objects.</p> required <code>request</code> <code>Request</code> <p>A Request object containing form data and uploaded files.</p> required"},{"location":"api/process_form/#hedweb.process_form.ProcessForm.set_json_files","title":"set_json_files  <code>staticmethod</code>","text":"<pre><code>set_json_files(arguments, request)\n</code></pre> <p>Extract and set JSON files from the request form data.</p> <p>This method processes uploaded JSON files (sidecars, remodel files, definition files) and creates appropriate objects from them, adding them to the arguments dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>Dictionary to store the extracted JSON file objects.</p> required <code>request</code> <code>Request</code> <p>A Request object containing form data and uploaded files.</p> required"},{"location":"api/process_form/#hedweb.process_form.ProcessForm.set_queries","title":"set_queries  <code>staticmethod</code>","text":"<pre><code>set_queries(arguments, request)\n</code></pre> <p>Update arguments with lists of string queries</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>A dictionary with the extracted parameters that are to be processed.</p> required <code>request</code> <code>Request</code> <p>A Request object containing form data.</p> required"},{"location":"api/process_form/#hedweb.process_form.ProcessForm.set_schema_from_request","title":"set_schema_from_request  <code>staticmethod</code>","text":"<pre><code>set_schema_from_request(arguments, request)\n</code></pre> <p>Create a HedSchema object from form pull-down box and set schema in arguments.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>Dictionary of parameters to which the schema will be added.</p> required <code>request</code> <code>Request</code> <p>A Request object containing form data.</p> required"},{"location":"api/process_form/#hedweb.process_form.ProcessForm.set_tsv_schema","title":"set_tsv_schema  <code>staticmethod</code>","text":"<pre><code>set_tsv_schema(arguments, request, files_key, schema_key)\n</code></pre> <p>Set the schema in arguments from a folder of TSV files.</p> <p>This method handles uploaded TSV schema files that are uploaded as a folder structure, saves them to a temporary directory, and loads the schema from the appropriate file.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>Dictionary of parameters to which the schema will be added.</p> required <code>request</code> <code>Request</code> <p>A Request object containing form data.</p> required <code>files_key</code> <code>str</code> <p>The key in the request.files dictionary that contains the TSV files.</p> required <code>schema_key</code> <code>str</code> <p>The key in the arguments dictionary where the schema will be stored.</p> required"},{"location":"api/process_form/#hedweb.process_form.ProcessForm.set_schema_from_version","title":"set_schema_from_version  <code>staticmethod</code>","text":"<pre><code>set_schema_from_version(arguments, request)\n</code></pre> <p>Set the schema field in arguments from a version string or uploaded file.</p> <p>This method handles schema selection from a version dropdown or from an uploaded schema file when \"other\" version is selected.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>Dictionary of parameters to which the schema will be added.</p> required <code>request</code> <code>Request</code> <p>A Request object containing form data.</p> required"},{"location":"api/process_form/#hedweb.process_form.ProcessForm.get_schema","title":"get_schema  <code>staticmethod</code>","text":"<pre><code>get_schema(\n    schema_input=None, version=None, as_xml_string=None\n) -&gt; HedSchema\n</code></pre> <p>Return a HedSchema object from the given parameters.</p> <p>Parameters:</p> Name Type Description Default <code>schema_input</code> <code>str or FileStorage or None</code> <p>Input url or file.</p> <code>None</code> <code>version</code> <code>str or None</code> <p>A schema version string to load, e.g. \"8.2.0\" or \"score_1.1.0\".</p> <code>None</code> <code>as_xml_string</code> <code>str or None</code> <p>A schema in xml string format.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>HedSchema</code> <code>HedSchema</code> <p>A HedSchema object loaded from the input.</p> <p>Raises:</p> Type Description <code>HedFileError</code> <p>The schema can't be loaded for some reason.</p>"},{"location":"api/process_service/","title":"Process Service","text":"<p>This module contains the core service orchestration and processing logic for HED web operations.</p>"},{"location":"api/process_service/#hedweb.process_service","title":"process_service","text":"<p>Handles processing of service requests in a standardized way.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices","title":"ProcessServices","text":"<p>A class to process service requests and return results in a standard format.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.set_input_from_request","title":"set_input_from_request  <code>staticmethod</code>","text":"<pre><code>set_input_from_request(request) -&gt; dict\n</code></pre> <p>Get a dictionary of input from a service request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>A Request object containing user data for the service request.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing input arguments for calling the service request.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.set_parameters","title":"set_parameters  <code>staticmethod</code>","text":"<pre><code>set_parameters(arguments, params)\n</code></pre> <p>Update arguments with the columns that requested for the service.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>A dictionary with the extracted parameters that are to be processed.</p> required <code>params</code> <code>dict</code> <p>The service request dictionary extracted from the Request object.</p> required"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.get_list","title":"get_list  <code>staticmethod</code>","text":"<pre><code>get_list(name, params) -&gt; list\n</code></pre> <p>Return value in params associated with name as a list.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the parameter to extract from the params dictionary.</p> required <code>params</code> <code>dict</code> <p>A dictionary of the service request values.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of values associated with the name in the params dictionary.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.set_queries","title":"set_queries  <code>staticmethod</code>","text":"<pre><code>set_queries(arguments, params)\n</code></pre> <p>Update arguments with lists of string queries and query names.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>A dictionary with the extracted parameters that are to be processed.</p> required <code>params</code> <code>dict</code> <p>The service request dictionary extracted from the Request object.</p> required"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.set_sidecar","title":"set_sidecar  <code>staticmethod</code>","text":"<pre><code>set_sidecar(arguments, params)\n</code></pre> <p>Update arguments with the sidecars if there are any.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>A dictionary with the extracted parameters that are to be processed.</p> required <code>params</code> <code>dict</code> <p>The service request dictionary extracted from the Request object.</p> required"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.set_definitions","title":"set_definitions  <code>staticmethod</code>","text":"<pre><code>set_definitions(arguments, params)\n</code></pre> <p>Update arguments with the definitions if there are any.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>A dictionary with the extracted parameters that are to be processed.</p> required <code>params</code> <code>dict</code> <p>The service request dictionary extracted from the Request object.</p> required"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.set_input_objects","title":"set_input_objects  <code>staticmethod</code>","text":"<pre><code>set_input_objects(arguments, params)\n</code></pre> <p>Update arguments with the information in the params dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>A dictionary with the extracted parameters that are to be processed.</p> required <code>params</code> <code>dict</code> <p>A dictionary of the service request values.</p> required <p>Updates the arguments dictionary with the input objects including events, spreadsheets, schemas or strings.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.set_remodel_parameters","title":"set_remodel_parameters  <code>staticmethod</code>","text":"<pre><code>set_remodel_parameters(arguments, params)\n</code></pre> <p>Update arguments with the remodeler information if any.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>A dictionary with the extracted parameters that are to be processed.</p> required <code>params</code> <code>dict</code> <p>The service request dictionary extracted from the Request object.</p> required <p>Updates the arguments dictionary with the sidecars.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.get_service_info","title":"get_service_info  <code>staticmethod</code>","text":"<pre><code>get_service_info(params) -&gt; dict\n</code></pre> <p>Get a dictionary with the service request command information filled in.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict</code> <p>A dictionary of the service request values.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the command, command target and options resolved from the service request.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.get_input_schema","title":"get_input_schema  <code>staticmethod</code>","text":"<pre><code>get_input_schema(parameters)\n</code></pre> <p>Get a HedSchema or HedSchemaGroup object from the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>dict</code> <p>A dictionary of parameters extracted from the service request.</p> required"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.process","title":"process  <code>staticmethod</code>","text":"<pre><code>process(arguments) -&gt; dict\n</code></pre> <p>Call the desired service processing function and return the results in a standard format.</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>dict</code> <p>A dictionary of arguments for the processing resolved from the request.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in standard response format to be JSONified.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.get_process","title":"get_process  <code>staticmethod</code>","text":"<pre><code>get_process(target) -&gt; BaseOperations\n</code></pre> <p>Return the BaseProcess object specific to the target string. </p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>Indicates what type of BaseProcess is needed. </p> required <p>Returns:</p> Name Type Description <code>BaseOperations</code> <code>BaseOperations</code> <p>A processing object of a subclass of BaseOperations.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.package_spreadsheet","title":"package_spreadsheet  <code>staticmethod</code>","text":"<pre><code>package_spreadsheet(results) -&gt; dict\n</code></pre> <p>Get the transformed results dictionary where spreadsheets are converted to strings.</p> <p>Parameters:</p> Name Type Description Default <code>results</code> <code>dict</code> <p>The dictionary of results in standardized form returned from processing.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The results transformed so that all entries are strings.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.get_services_list","title":"get_services_list  <code>staticmethod</code>","text":"<pre><code>get_services_list() -&gt; dict\n</code></pre> <p>Get a formatted string describing services using the resources/services.json file</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>dictionary in standard form with data as formatted string of services.</p>"},{"location":"api/process_service/#hedweb.process_service.ProcessServices.get_parameter_string","title":"get_parameter_string  <code>staticmethod</code>","text":"<pre><code>get_parameter_string(params) -&gt; str\n</code></pre> <p>Get a formatted string describing the parameters for a service. Parameters:     params (list): A list of parameters for the service. Returns:     str: A formatted string describing the parameters.</p>"},{"location":"api/routes/","title":"Routes","text":"<p>This module handles web interface endpoints and request routing for the HED web application.</p>"},{"location":"api/routes/#hedweb.routes","title":"routes","text":"<p>Handles the routes for the HED web application.</p>"},{"location":"api/routes/#hedweb.routes.columns_info_results","title":"columns_info_results","text":"<pre><code>columns_info_results() -&gt; str\n</code></pre> <p>Process columns info request and return results as a JSON string. Returns:     str: A serialized JSON string containing the columns information.</p>"},{"location":"api/routes/#hedweb.routes.events_results","title":"events_results","text":"<pre><code>events_results() -&gt; Response\n</code></pre> <p>Process events form submission and return results.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The response appropriate to the request.</p> Notes <p>The response depends on the request: - validation: text file with validation errors - assemble:  an assembled events file containing assembled events. - generate:  a JSON sidecar generated from the events file.</p>"},{"location":"api/routes/#hedweb.routes.schemas_results","title":"schemas_results","text":"<pre><code>schemas_results() -&gt; Response\n</code></pre> <p>Process schema form submission and return results.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The response appropriate to the request.</p> Notes <p>The response depends on the request: - validation: text file with validation errors - convert:  text file with converted schema.</p>"},{"location":"api/routes/#hedweb.routes.schema_version_results","title":"schema_version_results","text":"<pre><code>schema_version_results() -&gt; str\n</code></pre> <p>Return the version of the schema as a JSON string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A serialized JSON string containing the version of the schema.</p>"},{"location":"api/routes/#hedweb.routes.schema_versions_results","title":"schema_versions_results","text":"<pre><code>schema_versions_results() -&gt; str\n</code></pre> <p>Return serialized JSON string with HED versions.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A serialized JSON string containing a list of the HED versions.</p>"},{"location":"api/routes/#hedweb.routes.services_results","title":"services_results","text":"<pre><code>services_results() -&gt; str\n</code></pre> <p>Perform the requested web service and return the results in JSON.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A serialized JSON string containing processed information.</p>"},{"location":"api/routes/#hedweb.routes.sidecars_results","title":"sidecars_results","text":"<pre><code>sidecars_results() -&gt; Response\n</code></pre> <p>Process sidecar form submission and return results.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The response appropriate to the request.</p> Notes <p>The response depends on the request: - validation: text file with validation errors - convert:  converted sidecar. - extract:  4-column spreadsheets. - merge:  a merged sidecar.</p>"},{"location":"api/routes/#hedweb.routes.spreadsheets_results","title":"spreadsheets_results","text":"<pre><code>spreadsheets_results() -&gt; Response\n</code></pre> <p>Process the spreadsheets in the form and return results.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The response appropriate to the request.</p> Notes <p>The response depends on the request: - validation: text file with validation errors - convert:  converted spreadsheets.</p>"},{"location":"api/routes/#hedweb.routes.strings_results","title":"strings_results","text":"<pre><code>strings_results() -&gt; str\n</code></pre> <p>Process string entered in a form text box.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>str</code> <p>The response appropriate to the request.</p> Notes <p>The response depends on the request, but appears in text box. - validation: validation errors - convert:  converted string.</p>"},{"location":"api/routes/#hedweb.routes.render_events_form","title":"render_events_form","text":"<pre><code>render_events_form() -&gt; str\n</code></pre> <p>Form for BIDS event file (with JSON sidecar) processing.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A rendered template for the events form.</p>"},{"location":"api/routes/#hedweb.routes.render_home_page","title":"render_home_page","text":"<pre><code>render_home_page() -&gt; str\n</code></pre> <p>The home page.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A rendered template for the home page.</p>"},{"location":"api/routes/#hedweb.routes.render_schemas_form","title":"render_schemas_form","text":"<pre><code>render_schemas_form() -&gt; str\n</code></pre> <p>The schema processing form.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A rendered template for the schema processing form.</p>"},{"location":"api/routes/#hedweb.routes.render_services_form","title":"render_services_form","text":"<pre><code>render_services_form() -&gt; str\n</code></pre> <p>Landing page for HED hedweb services.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A dummy rendered template so that the service can get a csrf token.</p>"},{"location":"api/routes/#hedweb.routes.render_sidecars_form","title":"render_sidecars_form","text":"<pre><code>render_sidecars_form() -&gt; str\n</code></pre> <p>The sidecar form.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A rendered template for the sidecar form.</p>"},{"location":"api/routes/#hedweb.routes.render_spreadsheets_form","title":"render_spreadsheets_form","text":"<pre><code>render_spreadsheets_form() -&gt; str\n</code></pre> <p>The spreadsheets form.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A rendered template for the spreadsheets form.</p>"},{"location":"api/routes/#hedweb.routes.render_strings_form","title":"render_strings_form","text":"<pre><code>render_strings_form() -&gt; str\n</code></pre> <p>The HED string form.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A rendered template for the HED string form.</p>"},{"location":"api/schema_operations/","title":"Schema Operations","text":"<p>This module handles HED schema manipulation, validation, and conversion operations.</p>"},{"location":"api/schema_operations/#hedweb.schema_operations","title":"schema_operations","text":"<p>Performs operations on HED schemas, such as validation, comparison, and conversion.</p>"},{"location":"api/schema_operations/#hedweb.schema_operations.SchemaOperations","title":"SchemaOperations","text":"<p>               Bases: <code>BaseOperations</code></p> <p>Class to perform operations on HED schemas.</p>"},{"location":"api/schema_operations/#hedweb.schema_operations.SchemaOperations.process","title":"process","text":"<pre><code>process() -&gt; dict\n</code></pre> <p>Perform the requested action for the schema.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in the standard results format.</p> <p>Raises:</p> Type Description <code>HedFileError</code> <p>If the command was not found or the input arguments were not valid.</p> <code>HedFileError</code> <p>If the schema is not found or cannot be loaded.</p>"},{"location":"api/schema_operations/#hedweb.schema_operations.SchemaOperations.compare","title":"compare","text":"<pre><code>compare()\n</code></pre> <p>Compare two schemas and return the differences. Returns:     dict: A dictionary of results in the standard results format.</p>"},{"location":"api/schema_operations/#hedweb.schema_operations.SchemaOperations.convert","title":"convert","text":"<pre><code>convert() -&gt; dict\n</code></pre> <p>Convert schema to multiple formats, save to temp dir, zip, and return as base64-encoded data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in the standard results format.</p>"},{"location":"api/schema_operations/#hedweb.schema_operations.SchemaOperations.validate","title":"validate","text":"<pre><code>validate() -&gt; dict\n</code></pre> <p>Run schema compliance for HED-3G.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in the standard results format.</p>"},{"location":"api/schema_operations/#hedweb.schema_operations.SchemaOperations.format_error","title":"format_error  <code>staticmethod</code>","text":"<pre><code>format_error(command, exception) -&gt; dict\n</code></pre> <p>Format an error for a schema command.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The command that caused the error.</p> required <code>exception</code> <code>HedFileError</code> <p>The exception that was raised.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in the standard results format.</p>"},{"location":"api/schema_operations/#hedweb.schema_operations.get_schema","title":"get_schema","text":"<pre><code>get_schema(\n    schema_input=None, version=None, as_xml_string=None\n) -&gt; HedSchema\n</code></pre> <p>Return a HedSchema object from the given parameters.</p> <p>Parameters:</p> Name Type Description Default <code>schema_input</code> <code>str or FileStorage or None</code> <p>Input url or file</p> <code>None</code> <code>version</code> <code>str or None</code> <p>A schema version string to load, e.g. \"8.2.0\" or \"score_1.1.0\"</p> <code>None</code> <code>as_xml_string</code> <code>str or None</code> <p>A schema in xml string format</p> <code>None</code> <p>Returns:</p> Name Type Description <code>HedSchema</code> <code>HedSchema</code> <p>Schema</p> <p>:raises HedFileError:     - The schema can't be loaded for some reason</p>"},{"location":"api/service_categories/","title":"Service Categories","text":""},{"location":"api/service_categories/#hed-schema-services","title":"HED Schema Services","text":"<p>Handle HED schema files and validation: - Schema validation and compliance checking - Format conversion (XML \u2194 MediaWiki) - Schema comparison and analysis - Version management</p>"},{"location":"api/service_categories/#hed-string-services","title":"HED String Services","text":"<p>Process individual HED annotation strings: - String validation against schemas - String assembly and combination - Format conversion and normalization - Search and pattern matching</p>"},{"location":"api/service_categories/#event-processing-services","title":"Event Processing Services","text":"<p>Work with event files containing HED annotations: - Event file validation - HED assembly (combining sidecars with events) - Event search and filtering - Remodeling operations</p>"},{"location":"api/service_categories/#sidecar-services","title":"Sidecar Services","text":"<p>Handle BIDS sidecar JSON files: - Sidecar validation - HED extraction and processing - Merging multiple sidecars - BIDS compliance checking</p>"},{"location":"api/service_categories/#spreadsheet-services","title":"Spreadsheet Services","text":"<p>Process tabular data with HED information: - Column mapping to HED concepts - Batch validation of HED data - Format conversion (Excel, CSV, TSV) - Data transformation and export</p>"},{"location":"api/sidecar_operations/","title":"Sidecar Operations","text":"<p>This module handles BIDS sidecar JSON file processing and HED annotation operations.</p>"},{"location":"api/sidecar_operations/#hedweb.sidecar_operations","title":"sidecar_operations","text":"<p>Performs operations on JSON sidecars, such as validation, conversion, extraction, and merging with spreadsheets.</p>"},{"location":"api/sidecar_operations/#hedweb.sidecar_operations.SidecarOperations","title":"SidecarOperations","text":"<p>               Bases: <code>BaseOperations</code></p> <p>Class to perform operations on sidecars.</p>"},{"location":"api/sidecar_operations/#hedweb.sidecar_operations.SidecarOperations.process","title":"process","text":"<pre><code>process() -&gt; dict\n</code></pre> <p>Perform the requested action for the sidecar.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results in standard form.</p> <p>Raises:</p> Type Description <code>HedFileError</code> <p>If the command was not found or the input arguments were not valid.</p> <code>HedFileError</code> <p>If the schema is not found or cannot be loaded.</p> <code>HedFileError</code> <p>If the sidecar is not found or cannot be loaded.</p> <code>HedFileError</code> <p>If a required spreadsheet is not found or cannot be loaded.</p>"},{"location":"api/sidecar_operations/#hedweb.sidecar_operations.SidecarOperations.sidecar_convert","title":"sidecar_convert","text":"<pre><code>sidecar_convert() -&gt; dict\n</code></pre> <p>Convert a sidecar from long to short form or short to long form.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A downloadable response dictionary</p> Notes <p>command (str):           Either 'to short' or 'to long' indicating type of conversion. expand_defs (bool):      If True, expand definitions when converting, otherwise do no expansion</p>"},{"location":"api/sidecar_operations/#hedweb.sidecar_operations.SidecarOperations.sidecar_extract","title":"sidecar_extract","text":"<pre><code>sidecar_extract() -&gt; dict\n</code></pre> <p>Create a four-column spreadsheet with the HED portion of the JSON sidecar.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A downloadable dictionary file or a file containing warnings</p>"},{"location":"api/sidecar_operations/#hedweb.sidecar_operations.SidecarOperations.sidecar_merge","title":"sidecar_merge","text":"<pre><code>sidecar_merge() -&gt; dict\n</code></pre> <p>Merge an edited 4-column spreadsheet with JSON sidecar.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A downloadable dictionary file or a file containing warnings</p> <p>Raises:</p> Type Description <code>HedFileError</code> <p>If the spreadsheet is not provided or cannot be loaded.</p> The allowed option for merge is: <p>include_description_tags (bool): If True, a Description tag is generated from Levels and included.</p>"},{"location":"api/sidecar_operations/#hedweb.sidecar_operations.SidecarOperations.sidecar_validate","title":"sidecar_validate","text":"<pre><code>sidecar_validate() -&gt; dict\n</code></pre> <p>Validate the sidecars and return the errors and/or a message in a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of response values in standard form.</p> The allowed option for validate is: <p>check_for_warnings (bool): If True, check for warnings as well as errors.</p>"},{"location":"api/spreadsheet_operations/","title":"Spreadsheet Operations","text":"<p>This module handles spreadsheet data processing, validation, and HED column operations.</p>"},{"location":"api/spreadsheet_operations/#hedweb.spreadsheet_operations","title":"spreadsheet_operations","text":"<p>Performs operations on spreadsheets, such as validation, conversion, and extraction.</p>"},{"location":"api/spreadsheet_operations/#hedweb.spreadsheet_operations.SpreadsheetOperations","title":"SpreadsheetOperations","text":"<p>               Bases: <code>BaseOperations</code></p> <p>Class to perform operations on spreadsheets.</p>"},{"location":"api/spreadsheet_operations/#hedweb.spreadsheet_operations.SpreadsheetOperations.process","title":"process","text":"<pre><code>process() -&gt; dict\n</code></pre> <p>Perform the requested action for the spreadsheet.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of results from spreadsheet processing in standard form.</p> <p>Raises:</p> Type Description <code>HedFileError</code> <p>If the command was not found or the input arguments were not valid.</p> <code>HedFileError</code> <p>If the schema is not found or cannot be loaded.</p> <code>HedFileError</code> <p>If the spreadsheet is not found or cannot be loaded.</p>"},{"location":"api/spreadsheet_operations/#hedweb.spreadsheet_operations.SpreadsheetOperations.spreadsheet_convert","title":"spreadsheet_convert","text":"<pre><code>spreadsheet_convert() -&gt; dict\n</code></pre> <p>Convert a spreadsheet long to short unless the command is not COMMAND_TO_LONG then converts to short</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A downloadable dictionary in standard format.</p> the allowed options are <p>command (str): Name of the command to execute. check_for_warnings (bool): If True, check for warnings.</p>"},{"location":"api/spreadsheet_operations/#hedweb.spreadsheet_operations.SpreadsheetOperations.spreadsheet_validate","title":"spreadsheet_validate","text":"<pre><code>spreadsheet_validate() -&gt; dict\n</code></pre> <p>Validates the spreadsheet.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing results of validation in standard format.</p> The allowed options are <p>check_for_warnings (bool): Indicates whether validation should check for warnings as well as errors.</p>"},{"location":"api/string_operations/","title":"String Operations","text":"<p>This module handles HED string validation, processing, and manipulation operations.</p>"},{"location":"api/string_operations/#hedweb.string_operations","title":"string_operations","text":"<p>Performs operations on strings, such as validation and conversion between long and short forms.</p>"},{"location":"api/string_operations/#hedweb.string_operations.StringOperations","title":"StringOperations","text":"<p>               Bases: <code>BaseOperations</code></p> <p>Class to perform operations on spreadsheets.</p>"},{"location":"api/string_operations/#hedweb.string_operations.StringOperations.process","title":"process","text":"<pre><code>process() -&gt; dict\n</code></pre> <p>Perform the requested string processing action.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The results in standard format.</p> <p>Raises:</p> Type Description <code>HedFileError</code> <p>If the command was not found or the input arguments were not valid.</p> <code>HedFileError</code> <p>If the schema is not found or cannot be loaded.</p> <code>HedFileError</code> <p>If the string list is empty or not provided.</p>"},{"location":"api/string_operations/#hedweb.string_operations.StringOperations.convert","title":"convert","text":"<pre><code>convert() -&gt; dict\n</code></pre> <p>Convert a list of strings from long to short or  from short to long.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The results of string processing in standard format.</p>"},{"location":"api/string_operations/#hedweb.string_operations.StringOperations.search","title":"search","text":"<pre><code>search() -&gt; dict\n</code></pre> <p>Return a list or a boolean</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary pointing to results or errors.</p> The options for this are <p>columns_included (list):  A list of column names of columns to include. expand_defs (bool): If True, expand the definitions in the assembled HED. Otherwise, shrink definitions.</p>"},{"location":"api/string_operations/#hedweb.string_operations.StringOperations.validate","title":"validate","text":"<pre><code>validate() -&gt; dict\n</code></pre> <p>Validate a list of strings and returns a dictionary containing the issues or a no issues message.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The results in standard form.</p>"},{"location":"api/web_util/","title":"Web Utils","text":"<p>This module contains common web application utilities and helper functions for HED web services.</p>"},{"location":"api/web_util/#hedweb.web_util","title":"web_util","text":"<p>Utilities for handling web requests and responses in the HED web application.</p>"},{"location":"api/web_util/#hedweb.web_util.convert_hed_versions","title":"convert_hed_versions","text":"<pre><code>convert_hed_versions(hed_info) -&gt; list\n</code></pre> <p>Convert a hed_info dictionary to a list of HED version strings.</p> <p>Parameters:</p> Name Type Description Default <code>hed_info</code> <code>dict</code> <p>A dictionary with HED version strings, where keys are prefixes and values are lists of HED versions.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of HED versions with prefixes applied.</p>"},{"location":"api/web_util/#hedweb.web_util.file_extension_is_valid","title":"file_extension_is_valid","text":"<pre><code>file_extension_is_valid(\n    filename, accepted_extensions=None\n) -&gt; bool\n</code></pre> <p>Return True if the file extension is an accepted one.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to be checked.</p> required <code>accepted_extensions</code> <code>list</code> <p>A list of accepted extensions.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the file has an accepted extension.</p>"},{"location":"api/web_util/#hedweb.web_util.filter_issues","title":"filter_issues","text":"<pre><code>filter_issues(issues, check_for_warnings)\n</code></pre> <p>Filter an issues list by severity level to allow warnings.</p>"},{"location":"api/web_util/#hedweb.web_util.form_has_file","title":"form_has_file","text":"<pre><code>form_has_file(\n    files, file_field, valid_extensions=None\n) -&gt; bool\n</code></pre> <p>Return True if a file with valid extension is in the request.</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>files</code> <p>A Request object files dictionary containing request information about files.</p> required <code>file_field</code> <code>str</code> <p>Name of the form field containing the file name.</p> required <code>valid_extensions</code> <code>list</code> <p>A list of valid extensions.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if a file is present in a request object.</p>"},{"location":"api/web_util/#hedweb.web_util.form_has_option","title":"form_has_option","text":"<pre><code>form_has_option(\n    form, option_name, target_value=None\n) -&gt; bool\n</code></pre> <p>Return True if given option has a specific value.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>form</code> <p>A Request.form dictionary containing the request.</p> required <code>option_name</code> <code>str</code> <p>The name of the radio button group in the hedweb form.</p> required <code>target_value</code> <code>str</code> <p>The name of the selected radio button option.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the target radio button has been set and false otherwise.</p> Notes <ul> <li>This is used for radio buttons and check boxes.</li> </ul>"},{"location":"api/web_util/#hedweb.web_util.form_has_url","title":"form_has_url","text":"<pre><code>form_has_url(\n    form, url_field, valid_extensions=None\n) -&gt; bool\n</code></pre> <p>Return True if the url_field has a valid extension.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>form</code> <p>A Request object form data.</p> required <code>url_field</code> <code>str</code> <p>The name of the form field with the URL to be parsed.</p> required <code>valid_extensions</code> <code>list</code> <p>A list of valid extensions.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if a URL is present in request object.</p>"},{"location":"api/web_util/#hedweb.web_util.generate_download_file_from_text","title":"generate_download_file_from_text","text":"<pre><code>generate_download_file_from_text(\n    results, file_header=None\n) -&gt; Response\n</code></pre> <p>Generate a download file from text output.</p> <p>Parameters:</p> Name Type Description Default <code>results</code> <code>dict</code> <p>Text with newlines for iterating.</p> required <code>file_header</code> <code>str</code> <p>Optional header for download file blob.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>A Response object containing the downloaded file.</p>"},{"location":"api/web_util/#hedweb.web_util.generate_download_spreadsheet","title":"generate_download_spreadsheet","text":"<pre><code>generate_download_spreadsheet(results) -&gt; Response\n</code></pre> <p>Generate a download Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>results</code> <code>dict</code> <p>Dictionary with the results to be downloaded.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>A Response object containing the downloaded file.</p>"},{"location":"api/web_util/#hedweb.web_util.generate_filename","title":"generate_filename","text":"<pre><code>generate_filename(\n    base_name,\n    name_prefix=None,\n    name_suffix=None,\n    extension=None,\n    append_datetime=False,\n) -&gt; str\n</code></pre> <p>Generate a filename for the attachment.</p> <p>Parameters:</p> Name Type Description Default <code>base_name</code> <code>str or None</code> <p>Name of the base, usually the name of the file that the issues were generated from.</p> required <code>name_prefix</code> <code>str or None</code> <p>Prefix prepended to the front of the base name.</p> <code>None</code> <code>name_suffix</code> <code>str or None</code> <p>Suffix appended to the end of the base name.</p> <code>None</code> <code>extension</code> <code>str or None</code> <p>Extension to use.</p> <code>None</code> <code>append_datetime</code> <code>bool</code> <p>If True, append the current date-time to the base output filename.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Name of the attachment other containing the issues.</p> Notes <ul> <li>The form prefix_basename_suffix + extension.</li> </ul>"},{"location":"api/web_util/#hedweb.web_util.generate_text_response","title":"generate_text_response","text":"<pre><code>generate_text_response(results) -&gt; Response\n</code></pre> <p>Generate a download response.</p> <p>Parameters:</p> Name Type Description Default <code>results</code> <code>dict</code> <p>Dictionary containing the results of the data.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>A Response object containing the downloaded file.</p>"},{"location":"api/web_util/#hedweb.web_util.generate_download_zip_file","title":"generate_download_zip_file","text":"<pre><code>generate_download_zip_file(results) -&gt; Response\n</code></pre> <p>Generate a download response.</p> <p>Parameters:</p> Name Type Description Default <code>results</code> <code>dict</code> <p>Dictionary of results to use in constructing response.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>A Response object containing the downloaded file.</p>"},{"location":"api/web_util/#hedweb.web_util.get_hed_schema_from_pull_down","title":"get_hed_schema_from_pull_down","text":"<pre><code>get_hed_schema_from_pull_down(request) -&gt; HedSchema\n</code></pre> <p>Create a HedSchema object from form pull-down box.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>A Request object containing form data.</p> required <p>Returns:</p> Name Type Description <code>HedSchema</code> <code>HedSchema</code> <p>The HED schema to use.</p>"},{"location":"api/web_util/#hedweb.web_util.get_option","title":"get_option","text":"<pre><code>get_option(options, option_name, default_value) -&gt; str\n</code></pre> <p>Get an option value from a dictionary of options.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>dict</code> <p>A dictionary of options.</p> required <code>option_name</code> <code>str</code> <p>The name of the option to retrieve.</p> required <code>default_value</code> <code>str</code> <p>The default value to return if the option is not found.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The value of the option if found, otherwise the default value.</p>"},{"location":"api/web_util/#hedweb.web_util.get_parsed_name","title":"get_parsed_name","text":"<pre><code>get_parsed_name(filename, is_url=False) -&gt; tuple[str, str]\n</code></pre> <p>Parse a filename or URL to extract the display name and file type. Parameters:     filename (str): The name of the file or URL to be parsed.     is_url (bool): If True, treat the filename as a URL. Returns:     tuple[str, str]: A tuple containing the display name and file type.</p>"},{"location":"api/web_util/#hedweb.web_util.get_schema_versions","title":"get_schema_versions","text":"<pre><code>get_schema_versions(hed_schema) -&gt; str\n</code></pre> <p>Get the formatted version of a HedSchema or HedSchemaGroup.</p> <p>Parameters:</p> Name Type Description Default <code>hed_schema</code> <code>HedSchema or HedSchemaGroup or None</code> <p>The schema or schema group to get the version from.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The formatted version of the schema for display purposes.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the provided hed_schema is not a HedSchema or HedSchemaGroup.</p>"},{"location":"api/web_util/#hedweb.web_util.handle_error","title":"handle_error","text":"<pre><code>handle_error(\n    ex, hed_info=None, title=None, return_as_str=True\n) -&gt; Union[str, dict]\n</code></pre> <p>Handle an error by returning a dictionary or simple string.</p> <p>Parameters:</p> Name Type Description Default <code>ex</code> <code>Exception</code> <p>The exception raised.</p> required <code>hed_info</code> <code>dict</code> <p>A dictionary of information describing the error.</p> <code>None</code> <code>title</code> <code>str</code> <p>A title to be included with the message.</p> <code>None</code> <code>return_as_str</code> <code>bool</code> <p>If true return as string otherwise as dictionary.</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[str, dict]</code> <p>Union[str, dict]: Contains error information.</p>"},{"location":"api/web_util/#hedweb.web_util.handle_http_error","title":"handle_http_error","text":"<pre><code>handle_http_error(ex) -&gt; Response\n</code></pre> <p>Handle  http error.</p> <p>Parameters:</p> Name Type Description Default <code>ex</code> <code>Exception</code> <p>A class that extends python Exception class.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>A response object indicating the field_type of error.</p>"},{"location":"api/web_util/#hedweb.web_util.get_exception_message","title":"get_exception_message","text":"<pre><code>get_exception_message(ex) -&gt; dict\n</code></pre> <p>Extract a suitable message for exception as a dictionary</p> <p>Parameters:</p> Name Type Description Default <code>ex</code> <code>Exception</code> <p>A class that extends python Exception class.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dict indicating the field_type of error.</p>"},{"location":"api/web_util/#hedweb.web_util.package_results","title":"package_results","text":"<pre><code>package_results(results) -&gt; Response\n</code></pre> <p>Package a results dictionary into a standard form.</p> <p>Parameters:</p> Name Type Description Default <code>results</code> <code>dict</code> <p>A dictionary with the results.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>A Response object containing the results in a standard format.</p>"}]}