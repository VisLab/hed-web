name: CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

# Minimal permissions required for Qlty upload
permissions:
  contents: read
  id-token: write

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
        pip install -e .

    - name: Run unit tests (with coverage)
      run: |
        python -m coverage run --data-file=.coverage.unit --source=hedweb -m unittest discover -s tests/ -p 'test_*.py'
        ls -la .coverage* || true

    - name: Upload coverage artifact (unit)
      uses: actions/upload-artifact@v5
      with:
        name: coverage-unit
        path: ${{ github.workspace }}/.coverage.unit
        if-no-files-found: error
        include-hidden-files: true

  service-tests:
    runs-on: ubuntu-latest
    env:
      HED_SERVER_URL_KEY: "http://127.0.0.1:5000"
      # Force CI-safe config and keep logs/cache inside the workspace
      HEDTOOLS_CONFIG_CLASS: "default_config.DevelopmentConfig"
      HED_BASE_DIRECTORY: ${{ github.workspace }}
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
        pip install -e .

    - name: Start server with coverage
      shell: bash
      env:
        COVERAGE_FILE: .coverage.service
      run: |
        echo "Starting server under coverage..."
        python -m coverage run --parallel-mode --source=hedweb -m hedweb.runserver &
        SERVER_PID=$!
        echo $SERVER_PID > server.pid
        echo "Server PID: $SERVER_PID"

    - name: Wait for server to be ready
      run: |
        echo "Waiting for server to be ready at ${HED_SERVER_URL_KEY}..."
        for i in {1..30}; do
          if curl -fsS "${HED_SERVER_URL_KEY}" >/dev/null 2>&1; then
            echo "Server is up."
            break
          fi
          sleep 1
        done
        curl --retry 10 --retry-delay 3 --retry-connrefused "${HED_SERVER_URL_KEY}" -sS -o /dev/null

    - name: Run service tests with coverage
      shell: bash
      env:
        COVERAGE_FILE: .coverage.service
      run: |
        echo "Running service tests under coverage..."
        python -m coverage run --parallel-mode --source=hedweb -m unittest discover -s services_tests/ -p 'test_*.py'

    - name: Stop server and combine coverage
      if: always()
      shell: bash
      env:
        COVERAGE_FILE: .coverage.service
      run: |
        if [ -f server.pid ]; then
          SERVER_PID=$(cat server.pid)
          echo "Stopping server (PID: ${SERVER_PID})..."
          kill -INT ${SERVER_PID} || true
          for i in {1..5}; do
            if ! kill -0 ${SERVER_PID} 2>/dev/null; then
              break
            fi
            sleep 1
          done
          kill ${SERVER_PID} 2>/dev/null || true
          wait ${SERVER_PID} 2>/dev/null || true
          rm -f server.pid
        fi
        echo "Combining coverage data for this job..."
        python -m coverage combine
        ls -la .coverage* || true

    - name: Show logs on failure
      if: failure()
      run: |
        echo "Displaying logs..."
        LOG_FILE="${HED_BASE_DIRECTORY}/log/error.log"
        if [ -f "$LOG_FILE" ]; then
          echo "Found log file at $LOG_FILE"
          tail -n 200 "$LOG_FILE"
        else
          echo "Log file not found at $LOG_FILE. Listing log directory:"
          ls -la "${HED_BASE_DIRECTORY}/log" || true
        fi

    - name: Upload coverage artifact (service)
      if: always()
      uses: actions/upload-artifact@v5
      with:
        name: coverage-service
        path: ${{ github.workspace }}/.coverage.service
        if-no-files-found: warn
        include-hidden-files: true

  coverage-merge:
    runs-on: ubuntu-latest
    needs: [unit-tests, service-tests]
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.10
      uses: actions/setup-python@v6
      with:
        python-version: "3.10"

    - name: Download coverage artifacts
      uses: actions/download-artifact@v6
      with:
        pattern: coverage-*
        merge-multiple: false
        path: coverage_artifacts

    - name: Prepare coverage files for merge
      run: |
        ls -R
        mkdir -p merged
        cp coverage_artifacts/coverage-unit/.coverage.unit merged/.coverage.unit
        if [ -f coverage_artifacts/coverage-service/.coverage.service ]; then
          cp coverage_artifacts/coverage-service/.coverage.service merged/.coverage.service
        fi

    - name: Install coverage tool
      run: |
        python -m pip install --upgrade coverage

    - name: Merge coverage and generate reports
      run: |
        cd merged
        if [ -f .coverage.service ]; then
          python -m coverage combine --rcfile=../.coveragerc .coverage.unit .coverage.service
        else
          python -m coverage combine --rcfile=../.coveragerc .coverage.unit
        fi
        python -m coverage xml --rcfile=../.coveragerc
        python -m coverage report --rcfile=../.coveragerc -m || true
        cd ..

    - name: Upload coverage to Qlty (merged)
      if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false) }}
      uses: qltysh/qlty-action/coverage@v2
      with:
        oidc: true
        files: ./merged/coverage.xml

    - name: Cleanup residual coverage data before Codecov
      run: |
        rm -rf coverage_artifacts || true

    - name: Upload coverage to Codecov (merged)
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
      uses: codecov/codecov-action@v5
      with:
        files: ./merged/coverage.xml
        disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Upload merged coverage XML artifact
      uses: actions/upload-artifact@v5
      with:
        name: coverage-xml
        path: merged/coverage.xml
        if-no-files-found: error
