name: CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

# Minimal permissions required for Qlty upload
permissions:
  contents: read
  id-token: write

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
        # Install package in editable mode so imports work consistently
        pip install -e .

    - name: Run unit tests (with coverage)
      run: |
        python -m coverage run --source=hedweb -m unittest discover -s tests/ -p 'test_*.py'
        # Keep raw data for merging; XML/LCOV will be generated in merge job

    - name: Upload coverage artifact (unit)
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit
        path: .coverage
        if-no-files-found: error

  service-tests:
    runs-on: ubuntu-latest
    env:
      HED_SERVER_URL_KEY: "http://127.0.0.1:5000"
      # Force CI-safe config and keep logs/cache inside the workspace
      HEDTOOLS_CONFIG_CLASS: "default_config.DevelopmentConfig"
      HED_BASE_DIRECTORY: ${{ github.workspace }}
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
        # Install package in editable mode so "python -m hedweb.runserver" works
        pip install -e .

    - name: Run server and service tests with coverage (produce raw data)
      shell: bash
      run: |
        set -euo pipefail
        echo "Starting server under coverage..."
        # Run server under coverage so server-side code executed by requests is measured
        python -m coverage run --parallel-mode --source=hedweb -m hedweb.runserver &
        SERVER_PID=$!

        # Wait for the server and verify it's reachable
        echo "Waiting for server to be ready at ${HED_SERVER_URL_KEY}..."
        for i in {1..30}; do
          if curl -fsS "${HED_SERVER_URL_KEY}" >/dev/null 2>&1; then
            echo "Server is up."
            break
          fi
          sleep 1
        done
        # Final check with retries
        curl --retry 10 --retry-delay 3 --retry-connrefused "${HED_SERVER_URL_KEY}" -sS -o /dev/null

        echo "Running service tests under coverage..."
        set +e
        python -m coverage run --parallel-mode --source=hedweb -m unittest discover -s services_tests/ -p 'test_*.py'
        TEST_STATUS=$?
        set -e

        echo "Stopping server (PID: ${SERVER_PID})..."
        # Prefer SIGINT so coverage can finalize cleanly
        kill -INT ${SERVER_PID} || true
        # Wait briefly, then fall back to SIGTERM if needed
        for i in {1..5}; do
          if ! kill -0 ${SERVER_PID} 2>/dev/null; then
            break
          fi
          sleep 1
        done
        kill ${SERVER_PID} 2>/dev/null || true
        wait ${SERVER_PID} 2>/dev/null || true

        echo "Combining coverage data for this job..."
        python -m coverage combine || true
        # Keep raw combined .coverage for cross-job merge

        exit ${TEST_STATUS}

    - name: Show logs on failure
      if: failure()
      run: |
        echo "Displaying logs..."
        LOG_FILE="${HED_BASE_DIRECTORY}/log/error.log"
        if [ -f "$LOG_FILE" ]; then
          echo "Found log file at $LOG_FILE"
          tail -n 200 "$LOG_FILE"
        else
          echo "Log file not found at $LOG_FILE. Listing log directory:"
          ls -la "${HED_BASE_DIRECTORY}/log" || true
        fi

    - name: Upload coverage artifact (service)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-service
        path: .coverage
        if-no-files-found: warn

  coverage-merge:
    runs-on: ubuntu-latest
    needs: [unit-tests, service-tests]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-*
        merge-multiple: false
        path: coverage_artifacts

    - name: Prepare coverage files for merge
      run: |
        ls -R
        # Move and rename to .coverage.* so coverage can combine explicitly
        mkdir -p merged
        cp coverage_artifacts/coverage-unit/.coverage merged/.coverage.unit
        if [ -f coverage_artifacts/coverage-service/.coverage ]; then
          cp coverage_artifacts/coverage-service/.coverage merged/.coverage.service
        fi

    - name: Install coverage tools
      run: |
        python -m pip install --upgrade coverage coverage-lcov

    - name: Merge coverage and generate reports
      run: |
        cd merged
        if [ -f .coverage.service ]; then
          python -m coverage combine .coverage.unit .coverage.service
        else
          python -m coverage combine .coverage.unit
        fi
        python -m coverage xml
        mkdir -p target
        python -m coverage lcov -o target/lcov.info
        cd ..
        # Place LCOV where qlty.toml expects it (repo-root/target)
        mkdir -p target
        cp merged/target/lcov.info target/lcov.info

    - name: Upload coverage to Qlty (merged)
      uses: qltysh/qlty-action/coverage@v2

    - name: Upload coverage to Codecov (merged)
      uses: codecov/codecov-action@v5
      with:
        files: ./merged/coverage.xml
        fail_ci_if_error: false
